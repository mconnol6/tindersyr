create procedure UpdateUser(in id varchar(10), in n varchar(100), in yr int, in b varchar(500), in h varchar(100), in g varchar(20), in i varchar(20), in num varchar(20), in do varchar(100), in maj varchar(100)) begin update users set name=n, year=yr, bio=b, hometown=h, gender=g, interested_in=i, number=num, dorm=do, major=maj where netid=id limit 1; end//

create procedure DeleteUser(in id varchar(10)) begin delete from users where netid=id limit 1; end//

create procedure GetSetups(
    in n varchar(10)

)
begin
select event_name, attendee, member from setup
where setup.setter_upper = n;
end//

create procedure GetPotentialMatch(
    in msu varchar(10),
    in nmsu varchar(10),
    in ma varchar(10),
    in nma varchar(10),
    in e varchar(100)
)
begin
    select * from potential_matches
    where
        msu = mem_setter_upper
        and nmsu = nonmem_setter_upper
        and ma = mem_attendee
        and nma = nonmem_attendee
        and e = event_name
    limit 1;
end//

create procedure CreatePotentialMatch(
    in msu varchar(10),
    in nmsu varchar(10),
    in ma varchar(10),
    in nma varchar(10),
    in e varchar(100)
)
begin
    insert into potential_matches
    values
    (msu,
    nmsu,
    ma,
    nma,
    e,
    NULL,
    NULL);
end//

create procedure UpdatePotentialMatchStatus(
    in msu varchar(10),
    in nmsu varchar(10),
    in ma varchar(10),
    in nma varchar(10),
    in e varchar(100),
    in s varchar(100),
    in m bool
)
begin
    if m = 1 then 
        update potential_matches
        set member_status = s
        where
            mem_setter_upper = msu
            and nonmem_setter_upper = nmsu
            and mem_attendee = ma
            and nonmem_attendee = nma
            and event_name = e
        limit 1;
    else
        update potential_matches
        set nonmember_status = s
        where
            mem_setter_upper = msu
            and nonmem_setter_upper = nmsu
            and mem_attendee = ma
            and nonmem_attendee = nma
            and event_name = e
        limit 1;
    end if;
end//

create procedure GetPotentialMatchList(
    in e varchar(100),
    in su varchar(10),
    in a varchar(10)
)
begin
    declare mem bool default 0;
    declare ii varchar(20) default "Both";
    declare g varchar(20) default "";

    select member from setup where
        su = setter_upper
        and a = attendee
        and e = event_name
    limit 1
    into mem;

    select interested_in from users where
        a = netid
    limit 1
    into ii;
    select gender from users where
        a = netid
    limit 1
    into g;

    if mem = 1 then
        select * from setup as s, users as u where
            s.status = "Searching"
            and s.attendee = u.netid
            and s.member = ! mem
            and ii = if (ii = "Both", ii, u.gender)
            and g = if (u.interested_in = "Both", g, u.interested_in)
            and s.event_name = e
            and (su, s.setter_upper, a, s.attendee, e)
            not in
            ( select 
                p.mem_setter_upper, 
                p.nonmem_setter_upper, 
                p.mem_attendee, p.nonmem_attendee, 
                p.event_name 
            from potential_matches as p 
            where p.member_status is not NULL
            or p.nonmember_status = "No");
    else
        select * from setup as s, users as u where
            s.status = "Searching"
            and s.attendee = u.netid
            and s.member = ! mem
            and ii = if (ii = "Both", ii, u.gender)
            and g = if (u.interested_in = "Both", g, u.interested_in)
            and s.event_name = e
            and (s.setter_upper, su, s.attendee, a, e)
            not in
            ( select 
                p.mem_setter_upper, 
                p.nonmem_setter_upper, 
                p.mem_attendee, p.nonmem_attendee, 
                p.event_name 
            from potential_matches as p
            where p.nonmember_status is not NULL
            or p.member_status = "No");

    end if;
end//
    

create procedure CreateSetup(
    in e varchar(100),
    in su varchar(10),
    in a varchar(10),
    m bool
)
begin
insert into setup (
    event_name,
    setter_upper,
    attendee,
    member
)
values (
    e,
    su,
    a,
    m
);
end//

create table setup (
    event_name varchar(100) not null,
    setter_upper varchar(10) not null,
    attendee varchar(10) not null,
    status varchar(100),
    member bool not null,
    primary key(event_name, setter_upper, attendee),
    foreign key(event_name)
        references event(name),
    foreign key(setter_upper)
        references users(netid),
    foreign key(attendee)
        references users(netid)
);

create table potential_matches(
    mem_setter_upper varchar(10) not null,
    nonmem_setter_upper varchar(10) not null,
    mem_attendee varchar(10) not null,
    nonmem_attendee varchar(10) not null,
    event_name varchar(100) not null,
    member_status varchar(100),
    nonmember_status varchar(100),
    primary key(mem_setter_upper, nonmem_setter_upper, mem_attendee, nonmem_attendee, event_name),
    foreign key(mem_setter_upper)
        references users(netid),
    foreign key(nonmem_setter_upper)
        references users(netid),
    foreign key(mem_attendee)
        references users(netid),
    foreign key(nonmem_attendee)
        references users(netid),
    foreign key(event_name)
        references event(name)
);

//example of inserting into event table
insert into event(name, date, time, location, org_name) values ("Pasquerilla East Formal", str_to_date('11,5,2016', '%m,%d,%Y'), maketime(22,0,0), "Jordan Hall of Science", "Pasquerilla East Hall");

create table friends(
    netid varchar(10) not null,
    friend varchar(10) not null,
    primary key(netid, friend),
    foreign key(netid)
        references users(netid),
    foreign key(friend)
        references users(netid)
);
